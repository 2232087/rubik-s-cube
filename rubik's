<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rubik's Cube Example with Multiple Lights</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128/examples/js/controls/OrbitControls.js"></script>
    <script>
        // Scene
        const scene = new THREE.Scene();
        
        // Camera
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 10;

        // Renderer
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // OrbitControls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;
        controls.screenSpacePanning = true;  // Allow panning (moving)
        controls.minDistance = 5;            // Set minimum zoom distance
        controls.maxDistance = 20;           // Set maximum zoom distance
        controls.maxPolarAngle = Math.PI;    // Allow full vertical rotation

        // Colors for the cube faces
        const colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00, 0xffa500, 0xffffff];

        // Create a single cube
        function createCube(x, y, z) {
            const geometry = new THREE.BoxGeometry(1, 1, 1);
            const materials = [
                new THREE.MeshLambertMaterial({ color: colors[0] }), // Right face
                new THREE.MeshLambertMaterial({ color: colors[1] }), // Left face
                new THREE.MeshLambertMaterial({ color: colors[2] }), // Top face
                new THREE.MeshLambertMaterial({ color: colors[3] }), // Bottom face
                new THREE.MeshLambertMaterial({ color: colors[4] }), // Front face
                new THREE.MeshLambertMaterial({ color: colors[5] })  // Back face
            ];
            const cube = new THREE.Mesh(geometry, materials);
            cube.position.set(x, y, z);
            return cube;
        }

        // Create Rubik's cube
        const cubeSize = 1.05; // Adjusted to reduce spacing
        const rubiksCube = new THREE.Group();
        for (let x = -1; x <= 1; x++) {
            for (let y = -1; y <= 1; y++) {
                for (let z = -1; z <= 1; z++) {
                    const cube = createCube(x * cubeSize, y * cubeSize, z * cubeSize);
                    rubiksCube.add(cube);
                }
            }
        }
        scene.add(rubiksCube);

        // Add Directional Light
        const dirLight = new THREE.DirectionalLight(0xffffff, 1);
        dirLight.position.set(10, 10, 10);
        dirLight.castShadow = true;

        dirLight.shadow.mapSize.width = 1024;
        dirLight.shadow.mapSize.height = 1024;
        dirLight.shadow.camera.near = 0.5;
        dirLight.shadow.camera.far = 50;
        dirLight.shadow.camera.left = -10;
        dirLight.shadow.camera.right = 10;
        dirLight.shadow.camera.top = 10;
        dirLight.shadow.camera.bottom = -10;

        scene.add(dirLight);

        // Add SpotLight
        const spotLight = new THREE.SpotLight(0xffffff);
        spotLight.position.set(-10, 10, 10);
        spotLight.angle = Math.PI / 6;
        spotLight.penumbra = 0.1;
        spotLight.decay = 2;
        spotLight.distance = 50;
        spotLight.castShadow = true;

        spotLight.shadow.mapSize.width = 1024;
        spotLight.shadow.mapSize.height = 1024;
        spotLight.shadow.camera.near = 0.5;
        spotLight.shadow.camera.far = 50;

        scene.add(spotLight);

        // Add PointLight
        const pointLight = new THREE.PointLight(0xffffff, 1, 50);
        pointLight.position.set(0, 10, 0);
        pointLight.castShadow = true;

        pointLight.shadow.mapSize.width = 1024;
        pointLight.shadow.mapSize.height = 1024;
        pointLight.shadow.camera.near = 0.5;
        pointLight.shadow.camera.far = 50;

        scene.add(pointLight);

        // Add Ambient Light for overall illumination
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);

        // Animation
        function animate() {
            requestAnimationFrame(animate);

            controls.update(); // Required for damping

            renderer.render(scene, camera);
        }

        animate();

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>
